clear variables; close all; clc

%Setting the path to the resources relatively to the running OS
if isunix
    path = '/Users/mattiapezzano/Documents/GitHub/proj-bsp-2023/src/Data/';
else
    path = 'Data\';
end

%Loading the data files into a dir struct
myFiles = dir(strcat(path, '*.mat'));

%Loading the file containing the specifics about the EEG
%TODO: clean
tmp = load(strcat(path, 'chanlocs.mat'));
chanlocs = tmp.chanlocs;

subjNum = (length(myFiles) - 1)/2; % Number of subjects ("- 1" to exclude chanlocs.mat)

%Iterating through the activity data (skipping the first element)
for tmp = subjNum:-1:1 
    filePath = strcat(path, myFiles(tmp * 2 - 1).name); %Odd spacing w/ given data
    myWorkData(tmp) = load(filePath);
end

%Iterating through the rest data
for tmp = subjNum:-1:1
    filePath = strcat(path, myFiles(tmp * 2).name); %Even spacing w/ given data
    myRestData(tmp) = load(filePath);
end

chanNum = 19; %Number of electrodes
Fs = 500; %Sampling frequency
% hz = linspace(0, Fs/2, Fs*10); %Frequency scale
sigErr = 1000; %Number of samples to ignore
dimW = 45; %Window length in seconds to approximate for stationarity

%Defining the vector of the electrode channels
electrodes = strings(1, chanNum);
for i = 1:chanNum %TODO: length chanlocs - 2 redundant
    electrodes(i) = upper(chanlocs(i).labels);
end

%% Plotting the location of the electrodes in 3D
figure
plot3([chanlocs.X], [chanlocs.Y], [chanlocs.Z], 'ko', 'MarkerFaceColor','k');

%Labelling the electrodes
hold on
for tmp = 1:length(electrodes)
    text(chanlocs(tmp).X + 3, chanlocs(tmp).Y, chanlocs(tmp).Z, chanlocs(tmp).labels)
end

xlabel('X'), ylabel('Y'), zlabel('Z')
title('Electrode Positions')
axis square

%% PSD

%Plotting the differences between the power spectral densities in work and
%rest conditions for each subject
figure
for signal = subjNum:-1:1
    
    %Computing the PSD with the Welch method for every electrode in both
    %working and resting conditions
    for electrode = 1:length(electrodes)

        %Expliciting the signals in time domain
        timeWorkSig = myWorkData(signal).(electrodes(electrode));
        timeRestSig = myRestData(signal).(electrodes(electrode));

        %Trimming the time series to get rid of signal error
        timeWorkSig = timeWorkSig(1:length(timeWorkSig) - sigErr);
        timeRestSig = timeRestSig(1:length(timeRestSig) - sigErr);

        %Selecting a limited window to approximate for stationarity
        % (dimW seconds centered in the signal median)
        timeWorkSig = timeWorkSig(length(timeWorkSig)/2 - Fs*(dimW/2) : length(timeWorkSig)/2 + Fs*(dimW/2));
        timeRestSig = timeRestSig(length(timeRestSig)/2 - Fs*(dimW/2) : length(timeRestSig)/2 + Fs*(dimW/2));
        WorkRecord(electrode,:,signal)=timeWorkSig;
        RestRecord(electrode,:,signal)=timeRestSig;
        %Computing the PSD using the Welch method (specifics in references)
        [freqWorkSig(electrode, :, signal),hz] = pwelch(timeWorkSig, hamming(Fs*10), Fs*0.1, Fs*10);
        [freqRestSig(electrode, :, signal),~] = pwelch(timeRestSig, hamming(Fs*10), Fs*0.1, Fs*10);
        hz=hz*Fs/2/pi;
        freqWorkSig(electrode, :, signal) = 20*log10(pwelch(timeWorkSig, hamming(Fs*10), Fs*0.1, Fs*10));
        freqRestSig(electrode, :, signal) = 20*log10(pwelch(timeRestSig, hamming(Fs*10), Fs*0.1, Fs*10));

    end
    %Sorting the electrodes relatively to their X coordinate
    % (from the occipital lobe to the frontal lobe)
    [~, sortXidx] = sort([chanlocs.X]);

    %Defining a boolean for plotting purposes
    if signal < 4
        idx = 0;
    else 
        idx = 1;
    end
    tmp = signal + idx * 3;

    %Plotting the PSDs for working conditions
    subplot(4, 3, tmp)
    imagesc(hz, [], freqWorkSig(sortXidx, 1:length(hz), signal));
    set(gca, 'xlim', [0 70], 'clim', [-100 100]); %Focusing on the 0-70Hz range
    colorbar
    xlabel('Frequency (Hz)'), ylabel('F <-- --> O')
    title(strcat('Subj', int2str(signal), ' Work'))

    %Plotting the PSDs for resting conditions
    subplot(4, 3, tmp + 3)
    imagesc(hz,[], freqRestSig(sortXidx, 1:length(hz), signal));
    set(gca, 'xlim', [0 70], 'clim', [-100 100]); %Focusing on the 0-70Hz range
    colorbar
    xlabel('Frequency (Hz)'), ylabel('F <-- --> O')
    title(strcat('Subj', int2str(signal), ' Rest'))

    %TODO: choose colorbar range relatively to the normalization of the
    %fourier transform(?): run a simulation to know the actual value
    %beforehand
  
end

 figure
 plot(hz, freqRestSig(2, :, 2))

%% Plotting the topographic maps

%TODO: average of the PSD for the 4 given ranges. Four topoplots for each
%patient both in rest and working conditions

%Dividing the PSDs relatively to the lobe they belong to
for signal = subjNum:-1:1
    frontal = 7;
    temporalDx = 2;
    temporalSx = 2;
    parietal = 6;
    occipital = 2;

    for electrode = 1:length(electrodes)
        eTag = electrodes(electrode);

        if(startsWith(eTag, 'F'))
            frontalWork(frontal, :, signal) = freqWorkSig(electrode, :, signal);
            frontalRest(frontal, :, signal) = freqRestSig(electrode, :, signal);
            frontal = frontal - 1;
        elseif(startsWith(eTag, 'C') || startsWith(eTag, 'P'))
            parietalWork(parietal, :, signal) = freqWorkSig(electrode, :, signal);
            parietalRest(parietal, :, signal) = freqRestSig(electrode, :, signal);
            parietal = parietal - 1;
        elseif(startsWith(eTag, 'O'))
            occipitalWork(occipital, :, signal) = freqWorkSig(electrode, :, signal);
            occipitalRest(occipital, :, signal) = freqRestSig(electrode, :, signal);
            occipital = occipital - 1;
        elseif(eTag == "T4" || eTag == "T6")
            temporalDxWork(temporalDx, :, signal) = freqWorkSig(electrode, :, signal);
            temporalDxRest(temporalDx, :, signal) = freqRestSig(electrode, :, signal);
            temporalDx = temporalDx - 1;
        elseif(eTag == "T3" || eTag == "T5")
            temporalSxWork(temporalSx, :, signal) = freqWorkSig(electrode, :, signal);
            temporalSxRest(temporalSx, :, signal) = freqRestSig(electrode, :, signal);
            temporalSx = temporalSx - 1;
        end
    end

    %Computing the lobe mean
    fWMean(signal, :) = mean(frontalWork(:, :, signal));
    fRMean(signal, :) = mean(frontalRest(:, :, signal));

    pWMean(signal, :) = mean(parietalWork(:, :, signal));
    pRMean(signal, :) = mean(parietalRest(:, :, signal));

    oWMean(signal, :) = mean(occipitalWork(:, :, signal));
    oRMean(signal, :) = mean(occipitalRest(:, :, signal));

    tDWMean(signal, :) = mean(temporalDxWork(:, :, signal));
    tDRMean(signal, :) = mean(temporalDxRest(:, :, signal));

    tSWMean(signal, :) = mean(temporalSxWork(:, :, signal));
    tSRMean(signal, :) = mean(temporalSxRest(:, :, signal));

    %Plotting
    figure
    plot(hz, fWMean(signal, :))
    hold on
    plot(hz, fRMean(signal, :))

end

%% mean over freq band of interest

%interesting bands: delta(1,5-3,9Hz), theta(4-7Hz),
%alpha(8-13Hz), beta1(13-20Hz), beta2(20-30Hz), gamma(30-40Hz)

    deltaRest=zeros(length(electrodes),subjNum);
    thetaRest=zeros(length(electrodes),subjNum);
    alphaRest=zeros(length(electrodes),subjNum);
    beta1Rest=zeros(length(electrodes),subjNum);
    beta2Rest=zeros(length(electrodes),subjNum);
    gammaRest=zeros(length(electrodes),subjNum);
    deltaWork=zeros(length(electrodes),subjNum);
    thetaWork=zeros(length(electrodes),subjNum);
    alphaWork=zeros(length(electrodes),subjNum);
    beta1Work=zeros(length(electrodes),subjNum);
    beta2Work=zeros(length(electrodes),subjNum);
    gammaWork=zeros(length(electrodes),subjNum);

for i = subjNum:-1:1
    for j = 1:length(electrodes)
    deltaRest(j,i) = mean(freqRestSig(j,find(hz==1):find(hz==4),i));
    thetaRest(j,i) = mean(freqRestSig(j,find(hz==4):find(hz==7),i));
    alphaRest(j,i) = mean(freqRestSig(j,find(hz==8):find(hz==13),i));
    beta1Rest(j,i) = mean(freqRestSig(j,find(hz==13):find(hz==20),i));
    beta2Rest(j,i) = mean(freqRestSig(j,find(hz==20):find(hz==30),i));
    gammaRest(j,i) = mean(freqRestSig(j,find(hz==30):find(hz==40),i));
    deltaWork(j,i) = mean(freqWorkSig(j,find(hz==1):find(hz==4),i));
    thetaWork(j,i) = mean(freqWorkSig(j,find(hz==4):find(hz==7),i));
    alphaWork(j,i) = mean(freqWorkSig(j,find(hz==8):find(hz==13),i));
    beta1Work(j,i) = mean(freqWorkSig(j,find(hz==13):find(hz==20),i));
    beta2Work(j,i) = mean(freqWorkSig(j,find(hz==20):find(hz==30),i));
    gammaWork(j,i) = mean(freqWorkSig(j,find(hz==30):find(hz==40),i));
    end
end
%could save the ranges in a matrix and navigate it: improves operation ease
%but loses readability

%% topoplots

%% coherence between channels
for k=subjNum:-1:1
    for i= 1:length(electrodes)
        for j= 1:length(electrodes)
            RestMSC(i,j,k)=mschoere(RestRecord(i,:,k),RestRecord(j,:,k),hamming(Fs*10), Fs*0.1, Fs*10);
            WorkMSC(i,j,k)=mscohere();
        end
    end
end